* Главни разлики между функционалните изисквания и нефункционалните изисквания 

	Функционалните:
	- Те са базирани на клиентски изисквания
	- Те уточняват коя функционалност трябва да се вземе предвид
	- Функционалното тестване се извършва преди продукта да се пусне на базара 
	- Известно е само като функционално изискване 
	- Те включват тестване на техническата функционалност на системата 
	
	Нефункционални изсиквания:
	- Те се основават на разработчиците и техническите познания на екипа 
	- Те са фокусират върху това как тази функционалност трябва да бъде тествана 
	- Нефункционалните изисквания включват тестване на поддръжката, тестване на документацията и други тестове след пускането на пазара 
	- Известни са още като изисквания за качества 
	- Те включват поддръжане на качества като сигурност, използваемост
	
* Ролята на архитекта относно функционалността и качествата 

	Решенията, които взима архитекта относно софтуерната архитектура могат да допринесат за нивата на различните качества,
	например дадени решения могат да повдигнат производителността, а друго до липса на такава 
	
	
	Постигането на качества е въпрос на архитектурни решениея както и на не архитектурни решения.
	За пример не е архитектурен аспект да се направи интерфейса лесен за употреба, къде се намира елемент на екрана,
	но е архитектурно решение да влючкват различни функционалности/функции (примерно за cancel, undo, re-use)
	
* Качествени изисквания 

	Функционалните изсиквания определят какво трябва да прави софтуерната система 
	
	Качествените изисквания определят как софтуерната система да работи (те поставят ограничения върху начина по който системата ще се изпълнява)

	Ето и някои качествени изисквания:
	- Performance (Производителност): Описва колко бързо и ефективно системата отговаря на заявки при определено натоварване 
	- Reliablility (Надежност): Измерва способността на системата да работи коректно и без грешки за определен период от време 
	- Availability (Наличност): Показва каква част от времето системата е в изправност достъпна за употреба от потребителя 
	- Modifiability (Изменяемост): Отразвяа колко лесно и с какви разходи може да бъде променена или разишерена функционалността на системата 
	- Usability (Използваемост): Описва колко лесна, интуитивна и удобна е системата за крайните потребители 
	- Testability (Изпитаемост): Показва колко лесно е да се тества софтуерът, за да се открият дефекти в него 
	- Suvivability (Оцеляемост): Определя способността на системата да продължи да изпълнява критични си функции дори при атака или частичен отказ
	- Maintability (Поддръжка): Отразява колко лесно е софтуерът да бъде поддържан, което включва поправяне на грешки и звършване на малки подобрения
	- Accesibility (Достъпност): Гарантира, че системата може да се използва от хора с различни способности 
	
* Понятие за качество 

	Качеството е субективно, различните заинтересовани лица имат различни представи за това какво е "добра система"
	
	Изискванията за качество трябва да се формализират от архитекта от "сценарии за качество", те са предоставени на заинтересованите лице и те одобряват качествата.
	Сценариите демонстрират какво е качество за създаваната софтуерна система, като дават на архитекта и на заинтересованите лица основа за оценката на дизайна 
	
* Сценарии за качество 

	Това е конткретно и специфично изискване за това как системата трябва да се държи в определена ситуация, свързана с дадено качество 
	
	Сценарите за качество играят същата роля за дефиниране на нефункционални качества както ролят играят сценариите за употреба (use-case)
	за дефиниция на функционалните изисквнаия 
	
* Описание на един сценарии за качество 

	Всеки сценарии описва някаква случка и се характеризира с 6 компонента:
	- Въздействие: състояние/събитие, което подлежи на обработка
	- Източник: обект (човек, система или нещо друго) който генерира въздействието
	- Обект: системата (или нейна конкретна част) върху кояти се случва въздействието
	- Контекст: Условията, при които се намира обекта по време на обработка на въздействието 
	- Резултат: действията, предприети от оебкта при случването на въздействието 
	- Количествени параметри: резултатът трябва да подлежи на някакви количествени измервания, така че да позволи проверка 
	дали сценарият се изпълнява съгласно изискванията 
	
* Пример за Надежност 

	Представи си че популваш онлайн формуляр и изведнъж ти спира интернета, надеждната система ще запази автоматично това, 
	което си написал, и ще ти позволи да продължиш по-късно.
	
	Тогава в случая:
	- Контекст: Потребителя полълнява някакъв формуляр 
	- Източник: Външно събитие - прекъсване на мрежовата връзка 
	- Въздействие: Интернет връзката на потребителя прекъсва внезапно 
	- Обект: Онлайн формулярът и системата за подаване на данни 
	- Резултат: Въведените данни са запазени автоматично, при възстановяване на връзката потребителят продължава да попълва формуляра без зауба на данни 
	- Количествени параметри: 100 процента от данните в полетата трябва да бъдат запазени 
	
* Групи качества 

	Качествата могат да се разделят на следните 3 групи:
	- Технологични качества: Това са техническите характеристики, описващи как системата работи отвътре. Например: производителност, сигурност, надеждност 
	- Бизнес качества: това бизнес ориентираните като колко време ще отнеме за пускане на продукта на пазара 
	- Архитектурните качества: това са качествата, които описват самият дизайн на архитектурата, примерно колко е логична, последователна и добре структурирана 
	
* Изправност 

	Това е различно качество, което се състои от няколко други по-специфични атрибута, като:
	- Надежност (reliability)
	- Готовност или наличност (availability)
	- Безопастност (safety)
	- Сигурност (security)
	- Отказоустойчивост (fault-tolerance)
	- Възможност за промяна (modifiability)
	
* Какво представлява един сценарии за изправност 

	Изправноста в софтуера, се занимава със ситемните откази (сривове) и техните последствия 
	
	Един отказ се получава, когато системата спре да работи според спецификацията си и това може да се види от потребителя 
	
	Един дефект е вътрешна грешка в системата (бъг), докато отказът (failure) е външната, видима проява на този дефект
	Един дефект се превръща в отказа, когато стане наблюдаем от потребителя 
	
	Когато една система откаже, важна характеристика става времето за което тя се поправя 
	
* Измерване на наличност на една система 

	Наличността е вероятността една система да е в изправност и да работи точно тогава, когато имаме нужда от нея 
	d = Δtf / Δtf + Δtc
	
	Δtf е средното време, през което системата работи безпроблемно между два отказа
	Δtc е средното време, необходимо за отстраняване на повредата, след като тя е възникнала
	
* Какво определя един сценарии за изправност 

	Целта на един такъв сценарии е да се дефинира как системата трябва да се държи, когато възникне срив или отказ
	Ето следните атрибути на какво отговарят в този сценарии:
	- Източник: "От къде идва проблема?" дали е вътрешен компонент или външен фактор 
	- Въздействие: "Какво се случи?" - какъв е типът на срива 
	- Обект: "Кое се срина" - коя част от системата е отказала 
	- Контекст: "При какви условия?" - в какъв режим е била системата преди да бъде срината?
	- Резултат: "Какво трябва да направи системата?" какво са очакваните действия след срива (един вид какво системата трябва да направи)
	- Количествени параметри: "Как го измерваме?" тоест какви са метрките за оценка на изправността (дали проценст наличност, максимално време за отстраняване на срива)
	
* Какво определя един сценарии за изменяемост 
	
	Целта на един такъв сценарии е да се дефинира колко лесно и евтино може да се промени софтуера 
	
	Ето следните атрибути на какво отговарят в този сценарии:
	- Източник: "Кой?" кой иска съответната промяна дали разработчник или администратор 
	- Въздействие: "Какво?" какво точно трябва да се промени дали да се добави функция или свойство
	- Обект: "Къде" коя част на системата трябва да се промени дали модул или цялата система 
	- Контекст: "Кога?" кога се случва промяната дали по време на разработка или по време на работа 
	- Резултат: "Как?" какви са очакваните стъпки за извършване на работата 
	- Количествени параметри: "Колко?" каква всъщност е цената на промяната 
	
* Какво определя един сценарии за производителност 

	Целта на един такъв сценарии е да се определи колко бърза и ефективна е софтуерната система при определено натоварване 
	Ето следните атрибути на какво отговарят в този сценарии:
	- Източник: "Какво?" какво точно генерира самото натоварване в системата  
	- Въздействие: "Как?" как престига съобщението или завяката към системата (дали е периодично, хаотично)
	- Обект: "Кое?" коя част на системата всъщност е подложена на този тест 
	- Контекст: "При какви условия" в какъв режим работи системата (дали е нормален, претоварен)
	- Резултат: "Какво прави системата?" какви са реално очакваните действия от системата, как тя се очаква да бъде реагирана   
	- Количествени параметри: "Как го измерваме" кои са конкретните метрики за измерване на бързодействие (време за отговор, брой обработени заявки) 
	
* Какво определя един сценарии за сигурност  

	Целта на такъв сценарий е да се дефинира и измери обективно колко добре софтуерната система може да се защити от неоторизиран достъп или атаки 
	Ето следните атрибути на какво отговарят в този сценарии:
	- Източник: "Кой?" дава отговор на кой е потенциални нападател 
	- Въздействие: "Какво?" какво се опита да направи нападателя примерно да види информация в софтуерната система 
	- Обект: "Какво атакува?" коя е целта на атаката 
	- Контекст: "При какви условия?" в каква среда се случва атаката (дали онлайн, офлайн)
	- Резултат: "Как трябва да реагира системата" как се очаква системата да се защити при атака    
	- Количествени параметри: "Как го измерваме" кои са конкретните метрики за оценка на сигурността (колко време и усилия/време е нужно за пробив, каква е вероятността) 
	
* Какво определя един сценарии за изпитаемост 

	Целта на такъв сценарии е да се определи колко е лесно да се тества софтуерът, за да се открият дефекти в него 
	Ето следните атрибути на какво отговарят в този сценарии:
	- Източник: "Кой?" кой извършва тестването дали е клиента разработчика или тестер 
	- Въздействие: "Защо?" какво събитие предизвиква нуждата от тест 
	- Обект: "Какво?" какво точно се тества дали е част от кода или е някакъв конкретен модул 
	- Контекст: "Кога?" в кой етап от разработката се случва тестването 
	- Резултат: "Как системата помага" какви възможности трябва да предостави системата, за да улесни тестването 
	- Количествени параметри: "Как го измерваме?" кои са конкртените мерки за оценка на изпитаемостта (процент покритост на кода, време за изпълнене)
	
* 	Какво определя един сценарии за използваемост 

	Една система е нужно да има възможността да обучи потребителя (в случай ако той не е запознат с продукта)
	Трябва да се планира системата да може да накара потребителя да работи по ефективно 
	Какво може да направи системата, за да намали последствията от грешка на потребителя?

	Целта на такъв сценарии е да се определи колко лесна, ефективна и приятна за ползване е софтуерната системата за крайния потребител 
	Ето следните атрибути на какво отговарят в този сценарии:
	- Източник: "Кой?" винаги е крайния потребител, защото използваемостта е фокусирано върху неговото преживяване  
	- Въздействие: "Какво иска потребителя?" какви са неговите цели (да научи нещо ново, да работи бързо, да не прави грешки) 
	- Обект: "Какво използва потребителя?" коя част от системата е обект на неговото действие  
	- Контекст: "Кога?" кога се случва взаимойдествието (по време на нормална работа със ситемата) 
	- Резултат: "Как системата помага?" кои са конкретните функции, които улесняват потребителя  
	- Количествени параметри: "Как го измерваме" кои са метриките за оценка на използваемостта (време за изпълнение на задача, брой грешки, потребителска удовлетвореност)

* Бизнес качества 

	Съществуват и нефункционални качества , те обикновенно са времето за разработка, пазара и пазарните условия.
	Тези нефункционални (бизнес) качества също трябва да се дефинират добре, за да няма двусмислици 
	
	Време за пускане на продукта на пазара (Time to market, TTM):
	- Това време зависи от натиск на конкуренцията или дали има възможност за пускане на продукта скоро
	- Може да се намали това време ако се преизползват компоненти от стари проекти 
	
	Себестойност и печалба:
	- Всеки софтуерен проект си има бюджет, който не трябва да се надвишава и вече самите архитектури има различна цена 
	- Възможно е да се използва чужда технология, което може да доведе до по-скъп проект 
	- Възможно е да се направи високо изменяема архитектурата да излезе по-скъпа, но може да спести пари от поддръжка
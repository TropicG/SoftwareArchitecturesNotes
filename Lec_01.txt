* Процес за разработка на софтуер 

	Едма разработка на софтуер преминава през следните фази:
	- Анализ на изискванията
	- Дизайн
	- Имплементация
	- Верификация и валидация
	- Поддръжка
	
* Какво точно представлява софтуерна архитектура?

	Софтуерната Архитектура е първата стъпка в проектирането на един софтуер, за да се гарантира определени качества в системата 
	
	Софтуерната архитектура не се занимава с детайли относно алгоритми, конкретна имплементация или представяне на данни 
	
	Софтуерната архитектура се фокусира върху поведението и връзките между различни елементи 
	
	Но все пак, ето формална дефиниция: Архитектурата на дадена софтуерна система е съвкупност от структури, показващи различни софтуерни елементи на системата, външо видимите им свойства и връзките между тях.
	

* По-точно понятие за софтуерна архитектура
	
	Една софтуерна архитектура може да се раздели на няколко слоя:
	- Организационна архитектура (Enterprise Architecture): заминава се с основните процеси, технологичните и бизнес стратегиите в цялата организация
	- Системна архитектура (System Architecture): организация на програмита и инфраструктурата, върху която ще се изпълняват
	- Архитектура на приложението (Application Architecture): Организация на дадено приложение, подсистема или компонент
	
* Седемте нива на софтуерна архитектура 

	Една софтуерна архитектура може да бъде разгледане на 7 нива на абстракция:
	- Глобална/Корпоративна архитектура: Най-високото ниво, което обхваща цялата организация или множество системи
	- Системна архитектура: Фокусира се върху организация на конкретна система 
	- Приложна архитектура: Отнася се за структурата на едно конктретно приложение 
	- Макро-архитектура: Занимава се с по-големи структурни елементи като подсистеми и приложни рамки 
	- Микро-архитектура: Слиза на нивото на шаблони за проектиране 
	- Обекти: Най-ниското ниво на абстракция, свързано е с обектно-ориентираното прогрмаиране
	
* Архитектура структура 

	Архитектура структура е вид начин, по който може да погледнеш над една софтуерна система 
	
	Структура всъщност е една сувкупност от софтуерни елементи, техните външно видими свойства и връзките между тях.	
	Даден Изглед (View) е документираното представяне на дадена структура.
	
	Има няколко вида архитектурни структури:
	- модулни стуктури
	- стуктури на процеси 
	- структури на разположение 
	
* Модулни структури (Module Views)

	Елементите в модулните структури са модули - единици работа за изпълнение 
	Модулите предлагат поглед, ориентирам към реализацията на системата, без значение какво става по време на изпълнението
	
	(С други думи модулната структура описва организацията и зависимостите на фунцкионалностите) 
	
	На какви въпроси отговаря една модулна структура:
	- Коя функционалност в кой модул се намира?
	- Кои други модули може да използва дадения модул?
	- Как са свързани модулите по отношение на специализация и генерализация
	
* Декомпозиция на модулите (Layered Structuresw)

	Декомпозиция на модулите е връзката междъ модулите от вида "Х е под-модул на Y"
	
	Декомпозицията е процес на разбиване на една голяма система на по-малки, по-прости и по-лесно управляеми подмодули
	(Прави се декомпозиция докат елементите станат достатъчно прости, че да могат да се разбиват на лесно)
	
	Това улеснява бъдещите промени защото свързаните функционалности са групиране на едно място.
	Също това подпомага за разпределението на работата между различните екипи.

* Употреба на модулите 

	Употреба на модулите е врзъката между модулите от вида "X иползва Y"
	
	Структурата за употреба улеснява възможността за добавяне на нова функционалност 
	
* Структура на слоевете (Process Structures)

	Структурата на слоевете организира системата на хоризонтални нива, като всеки слой има строго определена роля и може да комуника 
	само със слоя под него 
	
	В структурата на слоевете, не е позволено един слой да прескача друг, за да комуникира с по-даден слой 
	Всеки слой скрива своята вътрешна работа от слоевете над него 
	
* Структура на процесите 

	Структурата на процесите описва как се държи системата, докато работи (тоест по време на изпълнение)
	Вместо да се показва как кодът е организиран (модулна структура), се описва как работи динамиката
	
	Елементите на тази структура са изчислителните процеси, които се изпълняват и каналите за комуникация между тях
	Основните въпроси, които отговаря тази структура са:
	- Кои са основните процеси и как си взаимодействат
	- Кои части от системата могат да работят паралелно
	- Как данните се движат през системата?
	
* Структура на разположението 

	Структурите на разположението описва връзката на софтуерните елементи и тяхната среда 
	
	Може да се разггледат и следните структури:
	- Структура на внедряване 
	- Разрепделенеи на работата 
	
* Структура на внедряването (Deployement diagram)

	Структурата на внедряването показва как софтуера се разполага физически върху хардуера и комуникационното оборудване
	
	Елементите на тази структура са:
	- процеси
	- хардуерни устройства
	- комуникационни канали
	
* Разпределение на работата 

	Разпределението на работата е структура която показва кой модул от кой екип се реализира 
	
	Елементите в тази структура са модулите и екипите 
	Целта е архитектра да планира какви хора и умения са нъжни за всеки модул и да помогне за правилното разпределение на задачите 
	
* 4 + 1 модел на софтуерна архиктура 
	
	Моделът 4 + 1 е начин за описване и документираме на софтуерната архитектура от различни гледни точки, за да бъде разбрана от всички заинтересовани лица.
	Идеята е че една единствена диаграма не е достатъчна, за да опише системата 
	
	Моделът е изграден от няколко части:
	- Логически изгелд: показва основните абстракции в системата, като обекти, класове и компоненти (Това може да се опише с Class Diagram, Object Diagram)
	- Изглед на процесите: показва системата като сувкупност от взаумодействащи си процеси по време на изпълнение (Това може дас е опише с Sequence Diagram, Communication Diagram)
	- Изглед на кода: Показва как отделните елементи на системата се намират във файловете код (Това може да се опише с Package Diagram, Component Diagram)
	- Физически изглед: Показва как софтуерните компоненти са разпределни между хардуерните възли в системата (Това може да се разгледа с Deployement Diagram)
	- +1: Показва съответените сценаарии на употреба (Това може да се покаже чрез Use Case Diagrams)
	
* Понятие за stakeholder 

	StakeHolder (Заинтересовано лице) е всеки, които има отношение за създаване на софтуерната система.
	Примери могат да бъдат: собственици, мениджъри, разработчици, крайни потребители 
	
	Самите заинтересовани лица искат много неща наведнъж като: да работи добре, да стане бързо, да стане евтино, бля бля
	
* Влиянието на Заинтересованите лица върху архитектурата 

	Исканията на заинтересованите лица могат много да си противоречат 
	
	Ролята на софтуерния архитектр е да балансира между различните интереси, за да бъдат бъдат отразени в спефицикацията на изискванията.
	
* Влияние на организацията върху архитектурата 

	Влияние може да оказват бизнес целите, състоянието на организацията, организационната структура и стратегиите за инвестиции 
	
* Влияние на технологиите върху архитекта 

	Влият индустриалните стандарт, добрите практики и преобладаващите инжинерни техники 
	
* Влие на опита на архитекта 

	Личните знания, уменията и предишния опит на архитекта влиият силно върху решенията, които той взима.
	
* Важни качества за архитекта и важни за него дейности 

	За да може един софтуерен архикт да бъде успешен, той ще се нуждае от:
	- Доста добро абстракно и аналитично мислене 
	- Добре познаване на технологията с която работи
	- Комуникативност, дипломатичност и умение за водене на преговори 
	
	Следните дейности за много важни за един софтуерен архиктект:
	 - Взимане на бизнес решения за създаваен на системите 
	 - Разбиране на изискванията 
	 - Създаване или избор на архитектура 
	 - Документиране на софтуерната архитектура 
	 - Анализ на софтуерната архитектура 
	 - Създаване на системата 
	 - Следене за наличие на съответствията между системата и софтуерната архитектура.
	 
* Взимане на бизнес решения 

	За да може да се вземе решение за създаване на дадена система трябва да се отговори на следните въпроси:
	- Каква е целевата функция?
	- За колко време ще стане?
	- Колко струва? 
	
	Това са въпроси, по които софтуерния архитект трябва да вземе решение, ако той не вземе решение вероятността за провал се увеличава
	
* Разбиране на изискванията 
	
	Изискванията (дали функционални или нефункционални) определят софтуерната архитектура 
	
	Участването на архитекта в изискванията е жизнено важно, защото това ще предотврати двусмислени изисквания, 
	както и че има шанс софтуерната архитектура да отговаря на поставените бизнес цели 
	
* Създаване или избор на архитектура 

	Това вече му е същинската работа на софтуерния архитект 
	
	Успешния проект зависи от изграждане на идейна цялост, а тя може да се постигне като има подреден мисловен процес от страна на архитекти 
	
* Документиране на софтуерната архитектура 

	Това е втората част от същинската работа на архитекта, трябва да бъде добре описана софтуерната архитектура 
	
* Анализ и оценка на софтуерната архитектура 

	По време на проектирането на софтуерната архитектура, може да има няколко варианта, те трябва добре да се оценят и да се анализират 
	
	Архитектурите ще се оценяват базирано на изпълняване на изисквнаията така и по отношение на финансови параметри 
	
* Създаване на системата 

	Ролята на архитекта по време на имплементацията на системата е да се следи дали се спазват предписанията в софтуерната архитектура. 
	
	И дори да има добре описана архитектура и документация, ако хората не я спазват, няма да има много смисъл 
	
* Следене за съответствия 

	След като софтуерната система се имплементира и премине в режим на поддръжка, архитекта трябва да следи за съответствията между системата и софтуерната архитектура 
	Ако по време на поддържката трябва да се наложат промени, те трябва да са съгласно с софтуерната архитектура.
	От друга страна също е вярно, софтуерната архитектура трябва да се адаптира към промените 
	
* Полза от софтуерната архитектура

	Ето някои от следните ползи:
	- За улесняване на дискусиите и анализа на системите между заинтересованите лица 
	- За улесняване на разработката и поддръжката 
	
	
	
